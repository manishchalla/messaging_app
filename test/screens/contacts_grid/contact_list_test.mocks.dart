// Mocks generated by Mockito 5.4.5 from annotations
// in cocolab_messaging/test/screens/contacts_grid/contact_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i4;

import 'package:flutter_contacts/flutter_contacts.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeName_0 extends _i1.SmartFake implements _i2.Name {
  _FakeName_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeContact_1 extends _i1.SmartFake implements _i2.Contact {
  _FakeContact_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Contact].
///
/// See the documentation for Mockito's code generation for more information.
class MockContact extends _i1.Mock implements _i2.Contact {
  MockContact() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i3.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  set id(String? _id) => super.noSuchMethod(
    Invocation.setter(#id, _id),
    returnValueForMissingStub: null,
  );

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  set displayName(String? _displayName) => super.noSuchMethod(
    Invocation.setter(#displayName, _displayName),
    returnValueForMissingStub: null,
  );

  @override
  set thumbnail(_i4.Uint8List? _thumbnail) => super.noSuchMethod(
    Invocation.setter(#thumbnail, _thumbnail),
    returnValueForMissingStub: null,
  );

  @override
  set photo(_i4.Uint8List? _photo) => super.noSuchMethod(
    Invocation.setter(#photo, _photo),
    returnValueForMissingStub: null,
  );

  @override
  bool get isStarred =>
      (super.noSuchMethod(Invocation.getter(#isStarred), returnValue: false)
          as bool);

  @override
  set isStarred(bool? _isStarred) => super.noSuchMethod(
    Invocation.setter(#isStarred, _isStarred),
    returnValueForMissingStub: null,
  );

  @override
  _i2.Name get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _FakeName_0(this, Invocation.getter(#name)),
          )
          as _i2.Name);

  @override
  set name(_i2.Name? _name) => super.noSuchMethod(
    Invocation.setter(#name, _name),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Phone> get phones =>
      (super.noSuchMethod(
            Invocation.getter(#phones),
            returnValue: <_i2.Phone>[],
          )
          as List<_i2.Phone>);

  @override
  set phones(List<_i2.Phone>? _phones) => super.noSuchMethod(
    Invocation.setter(#phones, _phones),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Email> get emails =>
      (super.noSuchMethod(
            Invocation.getter(#emails),
            returnValue: <_i2.Email>[],
          )
          as List<_i2.Email>);

  @override
  set emails(List<_i2.Email>? _emails) => super.noSuchMethod(
    Invocation.setter(#emails, _emails),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Address> get addresses =>
      (super.noSuchMethod(
            Invocation.getter(#addresses),
            returnValue: <_i2.Address>[],
          )
          as List<_i2.Address>);

  @override
  set addresses(List<_i2.Address>? _addresses) => super.noSuchMethod(
    Invocation.setter(#addresses, _addresses),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Organization> get organizations =>
      (super.noSuchMethod(
            Invocation.getter(#organizations),
            returnValue: <_i2.Organization>[],
          )
          as List<_i2.Organization>);

  @override
  set organizations(List<_i2.Organization>? _organizations) =>
      super.noSuchMethod(
        Invocation.setter(#organizations, _organizations),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.Website> get websites =>
      (super.noSuchMethod(
            Invocation.getter(#websites),
            returnValue: <_i2.Website>[],
          )
          as List<_i2.Website>);

  @override
  set websites(List<_i2.Website>? _websites) => super.noSuchMethod(
    Invocation.setter(#websites, _websites),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.SocialMedia> get socialMedias =>
      (super.noSuchMethod(
            Invocation.getter(#socialMedias),
            returnValue: <_i2.SocialMedia>[],
          )
          as List<_i2.SocialMedia>);

  @override
  set socialMedias(List<_i2.SocialMedia>? _socialMedias) => super.noSuchMethod(
    Invocation.setter(#socialMedias, _socialMedias),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Event> get events =>
      (super.noSuchMethod(
            Invocation.getter(#events),
            returnValue: <_i2.Event>[],
          )
          as List<_i2.Event>);

  @override
  set events(List<_i2.Event>? _events) => super.noSuchMethod(
    Invocation.setter(#events, _events),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Note> get notes =>
      (super.noSuchMethod(Invocation.getter(#notes), returnValue: <_i2.Note>[])
          as List<_i2.Note>);

  @override
  set notes(List<_i2.Note>? _notes) => super.noSuchMethod(
    Invocation.setter(#notes, _notes),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Account> get accounts =>
      (super.noSuchMethod(
            Invocation.getter(#accounts),
            returnValue: <_i2.Account>[],
          )
          as List<_i2.Account>);

  @override
  set accounts(List<_i2.Account>? _accounts) => super.noSuchMethod(
    Invocation.setter(#accounts, _accounts),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Group> get groups =>
      (super.noSuchMethod(
            Invocation.getter(#groups),
            returnValue: <_i2.Group>[],
          )
          as List<_i2.Group>);

  @override
  set groups(List<_i2.Group>? _groups) => super.noSuchMethod(
    Invocation.setter(#groups, _groups),
    returnValueForMissingStub: null,
  );

  @override
  bool get thumbnailFetched =>
      (super.noSuchMethod(
            Invocation.getter(#thumbnailFetched),
            returnValue: false,
          )
          as bool);

  @override
  set thumbnailFetched(bool? _thumbnailFetched) => super.noSuchMethod(
    Invocation.setter(#thumbnailFetched, _thumbnailFetched),
    returnValueForMissingStub: null,
  );

  @override
  bool get photoFetched =>
      (super.noSuchMethod(Invocation.getter(#photoFetched), returnValue: false)
          as bool);

  @override
  set photoFetched(bool? _photoFetched) => super.noSuchMethod(
    Invocation.setter(#photoFetched, _photoFetched),
    returnValueForMissingStub: null,
  );

  @override
  bool get isUnified =>
      (super.noSuchMethod(Invocation.getter(#isUnified), returnValue: false)
          as bool);

  @override
  set isUnified(bool? _isUnified) => super.noSuchMethod(
    Invocation.setter(#isUnified, _isUnified),
    returnValueForMissingStub: null,
  );

  @override
  bool get propertiesFetched =>
      (super.noSuchMethod(
            Invocation.getter(#propertiesFetched),
            returnValue: false,
          )
          as bool);

  @override
  set propertiesFetched(bool? _propertiesFetched) => super.noSuchMethod(
    Invocation.setter(#propertiesFetched, _propertiesFetched),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toJson({
    bool? withThumbnail = true,
    bool? withPhoto = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toJson, [], {
              #withThumbnail: withThumbnail,
              #withPhoto: withPhoto,
            }),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i5.Future<_i2.Contact> insert() =>
      (super.noSuchMethod(
            Invocation.method(#insert, []),
            returnValue: _i5.Future<_i2.Contact>.value(
              _FakeContact_1(this, Invocation.method(#insert, [])),
            ),
          )
          as _i5.Future<_i2.Contact>);

  @override
  _i5.Future<_i2.Contact> update({bool? withGroups = false}) =>
      (super.noSuchMethod(
            Invocation.method(#update, [], {#withGroups: withGroups}),
            returnValue: _i5.Future<_i2.Contact>.value(
              _FakeContact_1(
                this,
                Invocation.method(#update, [], {#withGroups: withGroups}),
              ),
            ),
          )
          as _i5.Future<_i2.Contact>);

  @override
  _i5.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  String toVCard({
    bool? withPhoto = true,
    String? productId,
    bool? includeDate = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toVCard, [], {
              #withPhoto: withPhoto,
              #productId: productId,
              #includeDate: includeDate,
            }),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#toVCard, [], {
                #withPhoto: withPhoto,
                #productId: productId,
                #includeDate: includeDate,
              }),
            ),
          )
          as String);

  @override
  void deduplicateProperties() => super.noSuchMethod(
    Invocation.method(#deduplicateProperties, []),
    returnValueForMissingStub: null,
  );
}
