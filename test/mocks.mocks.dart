// Mocks generated by Mockito 5.4.5 from annotations
// in cocolab_messaging/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:io' as _i14;
import 'dart:typed_data' as _i13;

import 'package:cocolab_messaging/models/conversation.dart' as _i19;
import 'package:cocolab_messaging/models/message.dart' as _i18;
import 'package:cocolab_messaging/services/auth_service.dart' as _i16;
import 'package:cocolab_messaging/services/message_service.dart' as _i17;
import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i3;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:firebase_database/firebase_database.dart' as _i5;
import 'package:firebase_database_platform_interface/firebase_database_platform_interface.dart'
    as _i12;
import 'package:firebase_storage/firebase_storage.dart' as _i6;
import 'package:firebase_storage_platform_interface/firebase_storage_platform_interface.dart'
    as _i7;
import 'package:flutter_contacts/flutter_contacts.dart' as _i9;
import 'package:image_picker/image_picker.dart' as _i15;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeActionCodeInfo_1 extends _i1.SmartFake
    implements _i3.ActionCodeInfo {
  _FakeActionCodeInfo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserCredential_2 extends _i1.SmartFake
    implements _i4.UserCredential {
  _FakeUserCredential_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConfirmationResult_3 extends _i1.SmartFake
    implements _i4.ConfirmationResult {
  _FakeConfirmationResult_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserMetadata_4 extends _i1.SmartFake implements _i3.UserMetadata {
  _FakeUserMetadata_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMultiFactor_5 extends _i1.SmartFake implements _i4.MultiFactor {
  _FakeMultiFactor_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIdTokenResult_6 extends _i1.SmartFake implements _i3.IdTokenResult {
  _FakeIdTokenResult_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUser_7 extends _i1.SmartFake implements _i4.User {
  _FakeUser_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseReference_8 extends _i1.SmartFake
    implements _i5.DatabaseReference {
  _FakeDatabaseReference_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTransactionResult_9 extends _i1.SmartFake
    implements _i5.TransactionResult {
  _FakeTransactionResult_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOnDisconnect_10 extends _i1.SmartFake implements _i5.OnDisconnect {
  _FakeOnDisconnect_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDataSnapshot_11 extends _i1.SmartFake implements _i5.DataSnapshot {
  _FakeDataSnapshot_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseEvent_12 extends _i1.SmartFake implements _i5.DatabaseEvent {
  _FakeDatabaseEvent_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuery_13 extends _i1.SmartFake implements _i5.Query {
  _FakeQuery_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_14 extends _i1.SmartFake implements Duration {
  _FakeDuration_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeReference_15 extends _i1.SmartFake implements _i6.Reference {
  _FakeReference_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseStorage_16 extends _i1.SmartFake
    implements _i6.FirebaseStorage {
  _FakeFirebaseStorage_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFullMetadata_17 extends _i1.SmartFake implements _i7.FullMetadata {
  _FakeFullMetadata_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeListResult_18 extends _i1.SmartFake implements _i6.ListResult {
  _FakeListResult_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUploadTask_19 extends _i1.SmartFake implements _i6.UploadTask {
  _FakeUploadTask_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDownloadTask_20 extends _i1.SmartFake implements _i6.DownloadTask {
  _FakeDownloadTask_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTaskSnapshot_21 extends _i1.SmartFake implements _i6.TaskSnapshot {
  _FakeTaskSnapshot_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_22<T> extends _i1.SmartFake implements _i8.Future<T> {
  _FakeFuture_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeName_23 extends _i1.SmartFake implements _i9.Name {
  _FakeName_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeContact_24 extends _i1.SmartFake implements _i9.Contact {
  _FakeContact_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLostDataResponse_25 extends _i1.SmartFake
    implements _i10.LostDataResponse {
  _FakeLostDataResponse_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i4.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)),
          )
          as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  set tenantId(String? tenantId) => super.noSuchMethod(
    Invocation.setter(#tenantId, tenantId),
    returnValueForMissingStub: null,
  );

  @override
  set customAuthDomain(String? customAuthDomain) => super.noSuchMethod(
    Invocation.setter(#customAuthDomain, customAuthDomain),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i8.Future<void> useAuthEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #useAuthEmulator,
              [host, port],
              {#automaticHostMapping: automaticHostMapping},
            ),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> applyActionCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#applyActionCode, [code]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i3.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#checkActionCode, [code]),
            returnValue: _i8.Future<_i3.ActionCodeInfo>.value(
              _FakeActionCodeInfo_1(
                this,
                Invocation.method(#checkActionCode, [code]),
              ),
            ),
          )
          as _i8.Future<_i3.ActionCodeInfo>);

  @override
  _i8.Future<void> confirmPasswordReset({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#confirmPasswordReset, [], {
              #code: code,
              #newPassword: newPassword,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i4.UserCredential> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#createUserWithEmailAndPassword, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<List<String>> fetchSignInMethodsForEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSignInMethodsForEmail, [email]),
            returnValue: _i8.Future<List<String>>.value(<String>[]),
          )
          as _i8.Future<List<String>>);

  @override
  _i8.Future<_i4.UserCredential> getRedirectResult() =>
      (super.noSuchMethod(
            Invocation.method(#getRedirectResult, []),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#getRedirectResult, []),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  bool isSignInWithEmailLink(String? emailLink) =>
      (super.noSuchMethod(
            Invocation.method(#isSignInWithEmailLink, [emailLink]),
            returnValue: false,
          )
          as bool);

  @override
  _i8.Stream<_i4.User?> authStateChanges() =>
      (super.noSuchMethod(
            Invocation.method(#authStateChanges, []),
            returnValue: _i8.Stream<_i4.User?>.empty(),
          )
          as _i8.Stream<_i4.User?>);

  @override
  _i8.Stream<_i4.User?> idTokenChanges() =>
      (super.noSuchMethod(
            Invocation.method(#idTokenChanges, []),
            returnValue: _i8.Stream<_i4.User?>.empty(),
          )
          as _i8.Stream<_i4.User?>);

  @override
  _i8.Stream<_i4.User?> userChanges() =>
      (super.noSuchMethod(
            Invocation.method(#userChanges, []),
            returnValue: _i8.Stream<_i4.User?>.empty(),
          )
          as _i8.Stream<_i4.User?>);

  @override
  _i8.Future<void> sendPasswordResetEmail({
    required String? email,
    _i3.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [], {
              #email: email,
              #actionCodeSettings: actionCodeSettings,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> sendSignInLinkToEmail({
    required String? email,
    required _i3.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendSignInLinkToEmail, [], {
              #email: email,
              #actionCodeSettings: actionCodeSettings,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setLanguageCode(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguageCode, [languageCode]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setSettings({
    bool? appVerificationDisabledForTesting = false,
    String? userAccessGroup,
    String? phoneNumber,
    String? smsCode,
    bool? forceRecaptchaFlow,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setSettings, [], {
              #appVerificationDisabledForTesting:
                  appVerificationDisabledForTesting,
              #userAccessGroup: userAccessGroup,
              #phoneNumber: phoneNumber,
              #smsCode: smsCode,
              #forceRecaptchaFlow: forceRecaptchaFlow,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setPersistence(_i3.Persistence? persistence) =>
      (super.noSuchMethod(
            Invocation.method(#setPersistence, [persistence]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i4.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInAnonymously, []),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithCredential(
    _i3.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCredential, [credential]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithCredential, [credential]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCustomToken, [token]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithCustomToken, [token]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithEmailAndPassword, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithEmailLink({
    required String? email,
    required String? emailLink,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailLink, [], {
              #email: email,
              #emailLink: emailLink,
            }),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithEmailLink, [], {
                  #email: email,
                  #emailLink: emailLink,
                }),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithProvider(
    _i3.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithProvider, [provider]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithProvider, [provider]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.ConfirmationResult> signInWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
            returnValue: _i8.Future<_i4.ConfirmationResult>.value(
              _FakeConfirmationResult_3(
                this,
                Invocation.method(#signInWithPhoneNumber, [
                  phoneNumber,
                  verifier,
                ]),
              ),
            ),
          )
          as _i8.Future<_i4.ConfirmationResult>);

  @override
  _i8.Future<_i4.UserCredential> signInWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPopup, [provider]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithPopup, [provider]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> signInWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithRedirect, [provider]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPasswordResetCode, [code]),
            returnValue: _i8.Future<String>.value(
              _i11.dummyValue<String>(
                this,
                Invocation.method(#verifyPasswordResetCode, [code]),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<void> verifyPhoneNumber({
    String? phoneNumber,
    _i3.PhoneMultiFactorInfo? multiFactorInfo,
    required _i3.PhoneVerificationCompleted? verificationCompleted,
    required _i3.PhoneVerificationFailed? verificationFailed,
    required _i3.PhoneCodeSent? codeSent,
    required _i3.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
    String? autoRetrievedSmsCodeForTesting,
    Duration? timeout = const Duration(seconds: 30),
    int? forceResendingToken,
    _i3.MultiFactorSession? multiFactorSession,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPhoneNumber, [], {
              #phoneNumber: phoneNumber,
              #multiFactorInfo: multiFactorInfo,
              #verificationCompleted: verificationCompleted,
              #verificationFailed: verificationFailed,
              #codeSent: codeSent,
              #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
              #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
              #timeout: timeout,
              #forceResendingToken: forceResendingToken,
              #multiFactorSession: multiFactorSession,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> revokeTokenWithAuthorizationCode(
    String? authorizationCode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#revokeTokenWithAuthorizationCode, [
              authorizationCode,
            ]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i4.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);

  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);

  @override
  _i3.UserMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeUserMetadata_4(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i3.UserMetadata);

  @override
  List<_i3.UserInfo> get providerData =>
      (super.noSuchMethod(
            Invocation.getter(#providerData),
            returnValue: <_i3.UserInfo>[],
          )
          as List<_i3.UserInfo>);

  @override
  String get uid =>
      (super.noSuchMethod(
            Invocation.getter(#uid),
            returnValue: _i11.dummyValue<String>(this, Invocation.getter(#uid)),
          )
          as String);

  @override
  _i4.MultiFactor get multiFactor =>
      (super.noSuchMethod(
            Invocation.getter(#multiFactor),
            returnValue: _FakeMultiFactor_5(
              this,
              Invocation.getter(#multiFactor),
            ),
          )
          as _i4.MultiFactor);

  @override
  _i8.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String?> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(
            Invocation.method(#getIdToken, [forceRefresh]),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<_i3.IdTokenResult> getIdTokenResult([
    bool? forceRefresh = false,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#getIdTokenResult, [forceRefresh]),
            returnValue: _i8.Future<_i3.IdTokenResult>.value(
              _FakeIdTokenResult_6(
                this,
                Invocation.method(#getIdTokenResult, [forceRefresh]),
              ),
            ),
          )
          as _i8.Future<_i3.IdTokenResult>);

  @override
  _i8.Future<_i4.UserCredential> linkWithCredential(
    _i3.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithCredential, [credential]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#linkWithCredential, [credential]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> linkWithProvider(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithProvider, [provider]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#linkWithProvider, [provider]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> reauthenticateWithProvider(
    _i3.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithProvider, [provider]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#reauthenticateWithProvider, [provider]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> reauthenticateWithPopup(
    _i3.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithPopup, [provider]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#reauthenticateWithPopup, [provider]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> reauthenticateWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithRedirect, [provider]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i4.UserCredential> linkWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithPopup, [provider]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#linkWithPopup, [provider]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> linkWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithRedirect, [provider]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i4.ConfirmationResult> linkWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
            returnValue: _i8.Future<_i4.ConfirmationResult>.value(
              _FakeConfirmationResult_3(
                this,
                Invocation.method(#linkWithPhoneNumber, [
                  phoneNumber,
                  verifier,
                ]),
              ),
            ),
          )
          as _i8.Future<_i4.ConfirmationResult>);

  @override
  _i8.Future<_i4.UserCredential> reauthenticateWithCredential(
    _i3.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithCredential, [credential]),
            returnValue: _i8.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#reauthenticateWithCredential, [credential]),
              ),
            ),
          )
          as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> sendEmailVerification([
    _i3.ActionCodeSettings? actionCodeSettings,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#sendEmailVerification, [actionCodeSettings]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i4.User> unlink(String? providerId) =>
      (super.noSuchMethod(
            Invocation.method(#unlink, [providerId]),
            returnValue: _i8.Future<_i4.User>.value(
              _FakeUser_7(this, Invocation.method(#unlink, [providerId])),
            ),
          )
          as _i8.Future<_i4.User>);

  @override
  _i8.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(
            Invocation.method(#updateEmail, [newEmail]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(
            Invocation.method(#updatePassword, [newPassword]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updatePhoneNumber(
    _i3.PhoneAuthCredential? phoneCredential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updatePhoneNumber, [phoneCredential]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(
            Invocation.method(#updateDisplayName, [displayName]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(
            Invocation.method(#updatePhotoURL, [photoURL]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [], {
              #displayName: displayName,
              #photoURL: photoURL,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> verifyBeforeUpdateEmail(
    String? newEmail, [
    _i3.ActionCodeSettings? actionCodeSettings,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#verifyBeforeUpdateEmail, [
              newEmail,
              actionCodeSettings,
            ]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [DatabaseReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseReference extends _i1.Mock implements _i5.DatabaseReference {
  MockDatabaseReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DatabaseReference get root =>
      (super.noSuchMethod(
            Invocation.getter(#root),
            returnValue: _FakeDatabaseReference_8(
              this,
              Invocation.getter(#root),
            ),
          )
          as _i5.DatabaseReference);

  @override
  _i5.DatabaseReference get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeDatabaseReference_8(
              this,
              Invocation.getter(#ref),
            ),
          )
          as _i5.DatabaseReference);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  _i8.Stream<_i5.DatabaseEvent> get onChildAdded =>
      (super.noSuchMethod(
            Invocation.getter(#onChildAdded),
            returnValue: _i8.Stream<_i5.DatabaseEvent>.empty(),
          )
          as _i8.Stream<_i5.DatabaseEvent>);

  @override
  _i8.Stream<_i5.DatabaseEvent> get onChildRemoved =>
      (super.noSuchMethod(
            Invocation.getter(#onChildRemoved),
            returnValue: _i8.Stream<_i5.DatabaseEvent>.empty(),
          )
          as _i8.Stream<_i5.DatabaseEvent>);

  @override
  _i8.Stream<_i5.DatabaseEvent> get onChildChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onChildChanged),
            returnValue: _i8.Stream<_i5.DatabaseEvent>.empty(),
          )
          as _i8.Stream<_i5.DatabaseEvent>);

  @override
  _i8.Stream<_i5.DatabaseEvent> get onChildMoved =>
      (super.noSuchMethod(
            Invocation.getter(#onChildMoved),
            returnValue: _i8.Stream<_i5.DatabaseEvent>.empty(),
          )
          as _i8.Stream<_i5.DatabaseEvent>);

  @override
  _i8.Stream<_i5.DatabaseEvent> get onValue =>
      (super.noSuchMethod(
            Invocation.getter(#onValue),
            returnValue: _i8.Stream<_i5.DatabaseEvent>.empty(),
          )
          as _i8.Stream<_i5.DatabaseEvent>);

  @override
  _i5.DatabaseReference child(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#child, [path]),
            returnValue: _FakeDatabaseReference_8(
              this,
              Invocation.method(#child, [path]),
            ),
          )
          as _i5.DatabaseReference);

  @override
  _i5.DatabaseReference push() =>
      (super.noSuchMethod(
            Invocation.method(#push, []),
            returnValue: _FakeDatabaseReference_8(
              this,
              Invocation.method(#push, []),
            ),
          )
          as _i5.DatabaseReference);

  @override
  _i8.Future<void> set(Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#set, [value]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setWithPriority(Object? value, Object? priority) =>
      (super.noSuchMethod(
            Invocation.method(#setWithPriority, [value, priority]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> update(Map<String, Object?>? value) =>
      (super.noSuchMethod(
            Invocation.method(#update, [value]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setPriority(Object? priority) =>
      (super.noSuchMethod(
            Invocation.method(#setPriority, [priority]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> remove() =>
      (super.noSuchMethod(
            Invocation.method(#remove, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i5.TransactionResult> runTransaction(
    _i12.TransactionHandler? transactionHandler, {
    bool? applyLocally = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runTransaction,
              [transactionHandler],
              {#applyLocally: applyLocally},
            ),
            returnValue: _i8.Future<_i5.TransactionResult>.value(
              _FakeTransactionResult_9(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {#applyLocally: applyLocally},
                ),
              ),
            ),
          )
          as _i8.Future<_i5.TransactionResult>);

  @override
  _i5.OnDisconnect onDisconnect() =>
      (super.noSuchMethod(
            Invocation.method(#onDisconnect, []),
            returnValue: _FakeOnDisconnect_10(
              this,
              Invocation.method(#onDisconnect, []),
            ),
          )
          as _i5.OnDisconnect);

  @override
  _i8.Future<_i5.DataSnapshot> get() =>
      (super.noSuchMethod(
            Invocation.method(#get, []),
            returnValue: _i8.Future<_i5.DataSnapshot>.value(
              _FakeDataSnapshot_11(this, Invocation.method(#get, [])),
            ),
          )
          as _i8.Future<_i5.DataSnapshot>);

  @override
  _i8.Future<_i5.DatabaseEvent> once([
    _i12.DatabaseEventType? eventType = _i12.DatabaseEventType.value,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#once, [eventType]),
            returnValue: _i8.Future<_i5.DatabaseEvent>.value(
              _FakeDatabaseEvent_12(
                this,
                Invocation.method(#once, [eventType]),
              ),
            ),
          )
          as _i8.Future<_i5.DatabaseEvent>);

  @override
  _i5.Query startAt(Object? value, {String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#startAt, [value], {#key: key}),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#startAt, [value], {#key: key}),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query startAfter(Object? value, {String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#startAfter, [value], {#key: key}),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#startAfter, [value], {#key: key}),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query endAt(Object? value, {String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#endAt, [value], {#key: key}),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#endAt, [value], {#key: key}),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query endBefore(Object? value, {String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#endBefore, [value], {#key: key}),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#endBefore, [value], {#key: key}),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query equalTo(Object? value, {String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#equalTo, [value], {#key: key}),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#equalTo, [value], {#key: key}),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query limitToFirst(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limitToFirst, [limit]),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#limitToFirst, [limit]),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query limitToLast(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limitToLast, [limit]),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#limitToLast, [limit]),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query orderByChild(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#orderByChild, [path]),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#orderByChild, [path]),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query orderByKey() =>
      (super.noSuchMethod(
            Invocation.method(#orderByKey, []),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#orderByKey, []),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query orderByValue() =>
      (super.noSuchMethod(
            Invocation.method(#orderByValue, []),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#orderByValue, []),
            ),
          )
          as _i5.Query);

  @override
  _i5.Query orderByPriority() =>
      (super.noSuchMethod(
            Invocation.method(#orderByPriority, []),
            returnValue: _FakeQuery_13(
              this,
              Invocation.method(#orderByPriority, []),
            ),
          )
          as _i5.Query);

  @override
  _i8.Future<void> keepSynced(bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#keepSynced, [value]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [FirebaseDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseDatabase extends _i1.Mock implements _i5.FirebaseDatabase {
  MockFirebaseDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)),
          )
          as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
    Invocation.setter(#databaseURL, _databaseURL),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  void useDatabaseEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) => super.noSuchMethod(
    Invocation.method(
      #useDatabaseEmulator,
      [host, port],
      {#automaticHostMapping: automaticHostMapping},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i5.DatabaseReference ref([String? path]) =>
      (super.noSuchMethod(
            Invocation.method(#ref, [path]),
            returnValue: _FakeDatabaseReference_8(
              this,
              Invocation.method(#ref, [path]),
            ),
          )
          as _i5.DatabaseReference);

  @override
  _i5.DatabaseReference refFromURL(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#refFromURL, [url]),
            returnValue: _FakeDatabaseReference_8(
              this,
              Invocation.method(#refFromURL, [url]),
            ),
          )
          as _i5.DatabaseReference);

  @override
  void setPersistenceEnabled(bool? enabled) => super.noSuchMethod(
    Invocation.method(#setPersistenceEnabled, [enabled]),
    returnValueForMissingStub: null,
  );

  @override
  void setPersistenceCacheSizeBytes(int? cacheSize) => super.noSuchMethod(
    Invocation.method(#setPersistenceCacheSizeBytes, [cacheSize]),
    returnValueForMissingStub: null,
  );

  @override
  void setLoggingEnabled(bool? enabled) => super.noSuchMethod(
    Invocation.method(#setLoggingEnabled, [enabled]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> goOnline() =>
      (super.noSuchMethod(
            Invocation.method(#goOnline, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> goOffline() =>
      (super.noSuchMethod(
            Invocation.method(#goOffline, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> purgeOutstandingWrites() =>
      (super.noSuchMethod(
            Invocation.method(#purgeOutstandingWrites, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [FirebaseStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorage extends _i1.Mock implements _i6.FirebaseStorage {
  MockFirebaseStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)),
          )
          as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  String get bucket =>
      (super.noSuchMethod(
            Invocation.getter(#bucket),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#bucket),
            ),
          )
          as String);

  @override
  set bucket(String? _bucket) => super.noSuchMethod(
    Invocation.setter(#bucket, _bucket),
    returnValueForMissingStub: null,
  );

  @override
  Duration get maxOperationRetryTime =>
      (super.noSuchMethod(
            Invocation.getter(#maxOperationRetryTime),
            returnValue: _FakeDuration_14(
              this,
              Invocation.getter(#maxOperationRetryTime),
            ),
          )
          as Duration);

  @override
  Duration get maxUploadRetryTime =>
      (super.noSuchMethod(
            Invocation.getter(#maxUploadRetryTime),
            returnValue: _FakeDuration_14(
              this,
              Invocation.getter(#maxUploadRetryTime),
            ),
          )
          as Duration);

  @override
  Duration get maxDownloadRetryTime =>
      (super.noSuchMethod(
            Invocation.getter(#maxDownloadRetryTime),
            returnValue: _FakeDuration_14(
              this,
              Invocation.getter(#maxDownloadRetryTime),
            ),
          )
          as Duration);

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i6.Reference ref([String? path]) =>
      (super.noSuchMethod(
            Invocation.method(#ref, [path]),
            returnValue: _FakeReference_15(
              this,
              Invocation.method(#ref, [path]),
            ),
          )
          as _i6.Reference);

  @override
  _i6.Reference refFromURL(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#refFromURL, [url]),
            returnValue: _FakeReference_15(
              this,
              Invocation.method(#refFromURL, [url]),
            ),
          )
          as _i6.Reference);

  @override
  void setMaxOperationRetryTime(Duration? time) => super.noSuchMethod(
    Invocation.method(#setMaxOperationRetryTime, [time]),
    returnValueForMissingStub: null,
  );

  @override
  void setMaxUploadRetryTime(Duration? time) => super.noSuchMethod(
    Invocation.method(#setMaxUploadRetryTime, [time]),
    returnValueForMissingStub: null,
  );

  @override
  void setMaxDownloadRetryTime(Duration? time) => super.noSuchMethod(
    Invocation.method(#setMaxDownloadRetryTime, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> useStorageEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #useStorageEmulator,
              [host, port],
              {#automaticHostMapping: automaticHostMapping},
            ),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [Reference].
///
/// See the documentation for Mockito's code generation for more information.
class MockReference extends _i1.Mock implements _i6.Reference {
  MockReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FirebaseStorage get storage =>
      (super.noSuchMethod(
            Invocation.getter(#storage),
            returnValue: _FakeFirebaseStorage_16(
              this,
              Invocation.getter(#storage),
            ),
          )
          as _i6.FirebaseStorage);

  @override
  String get bucket =>
      (super.noSuchMethod(
            Invocation.getter(#bucket),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#bucket),
            ),
          )
          as String);

  @override
  String get fullPath =>
      (super.noSuchMethod(
            Invocation.getter(#fullPath),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#fullPath),
            ),
          )
          as String);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  _i6.Reference get root =>
      (super.noSuchMethod(
            Invocation.getter(#root),
            returnValue: _FakeReference_15(this, Invocation.getter(#root)),
          )
          as _i6.Reference);

  @override
  _i6.Reference child(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#child, [path]),
            returnValue: _FakeReference_15(
              this,
              Invocation.method(#child, [path]),
            ),
          )
          as _i6.Reference);

  @override
  _i8.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String> getDownloadURL() =>
      (super.noSuchMethod(
            Invocation.method(#getDownloadURL, []),
            returnValue: _i8.Future<String>.value(
              _i11.dummyValue<String>(
                this,
                Invocation.method(#getDownloadURL, []),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<_i7.FullMetadata> getMetadata() =>
      (super.noSuchMethod(
            Invocation.method(#getMetadata, []),
            returnValue: _i8.Future<_i7.FullMetadata>.value(
              _FakeFullMetadata_17(this, Invocation.method(#getMetadata, [])),
            ),
          )
          as _i8.Future<_i7.FullMetadata>);

  @override
  _i8.Future<_i6.ListResult> list([_i7.ListOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#list, [options]),
            returnValue: _i8.Future<_i6.ListResult>.value(
              _FakeListResult_18(this, Invocation.method(#list, [options])),
            ),
          )
          as _i8.Future<_i6.ListResult>);

  @override
  _i8.Future<_i6.ListResult> listAll() =>
      (super.noSuchMethod(
            Invocation.method(#listAll, []),
            returnValue: _i8.Future<_i6.ListResult>.value(
              _FakeListResult_18(this, Invocation.method(#listAll, [])),
            ),
          )
          as _i8.Future<_i6.ListResult>);

  @override
  _i8.Future<_i13.Uint8List?> getData([int? maxSize = 10485760]) =>
      (super.noSuchMethod(
            Invocation.method(#getData, [maxSize]),
            returnValue: _i8.Future<_i13.Uint8List?>.value(),
          )
          as _i8.Future<_i13.Uint8List?>);

  @override
  _i6.UploadTask putData(
    _i13.Uint8List? data, [
    _i7.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#putData, [data, metadata]),
            returnValue: _FakeUploadTask_19(
              this,
              Invocation.method(#putData, [data, metadata]),
            ),
          )
          as _i6.UploadTask);

  @override
  _i6.UploadTask putBlob(dynamic blob, [_i7.SettableMetadata? metadata]) =>
      (super.noSuchMethod(
            Invocation.method(#putBlob, [blob, metadata]),
            returnValue: _FakeUploadTask_19(
              this,
              Invocation.method(#putBlob, [blob, metadata]),
            ),
          )
          as _i6.UploadTask);

  @override
  _i6.UploadTask putFile(_i14.File? file, [_i7.SettableMetadata? metadata]) =>
      (super.noSuchMethod(
            Invocation.method(#putFile, [file, metadata]),
            returnValue: _FakeUploadTask_19(
              this,
              Invocation.method(#putFile, [file, metadata]),
            ),
          )
          as _i6.UploadTask);

  @override
  _i6.UploadTask putString(
    String? data, {
    _i7.PutStringFormat? format = _i7.PutStringFormat.raw,
    _i7.SettableMetadata? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #putString,
              [data],
              {#format: format, #metadata: metadata},
            ),
            returnValue: _FakeUploadTask_19(
              this,
              Invocation.method(
                #putString,
                [data],
                {#format: format, #metadata: metadata},
              ),
            ),
          )
          as _i6.UploadTask);

  @override
  _i8.Future<_i7.FullMetadata> updateMetadata(_i7.SettableMetadata? metadata) =>
      (super.noSuchMethod(
            Invocation.method(#updateMetadata, [metadata]),
            returnValue: _i8.Future<_i7.FullMetadata>.value(
              _FakeFullMetadata_17(
                this,
                Invocation.method(#updateMetadata, [metadata]),
              ),
            ),
          )
          as _i8.Future<_i7.FullMetadata>);

  @override
  _i6.DownloadTask writeToFile(_i14.File? file) =>
      (super.noSuchMethod(
            Invocation.method(#writeToFile, [file]),
            returnValue: _FakeDownloadTask_20(
              this,
              Invocation.method(#writeToFile, [file]),
            ),
          )
          as _i6.DownloadTask);
}

/// A class which mocks [DataSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSnapshot extends _i1.Mock implements _i5.DataSnapshot {
  MockDataSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DatabaseReference get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeDatabaseReference_8(
              this,
              Invocation.getter(#ref),
            ),
          )
          as _i5.DatabaseReference);

  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);

  @override
  Iterable<_i5.DataSnapshot> get children =>
      (super.noSuchMethod(
            Invocation.getter(#children),
            returnValue: <_i5.DataSnapshot>[],
          )
          as Iterable<_i5.DataSnapshot>);

  @override
  bool hasChild(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#hasChild, [path]),
            returnValue: false,
          )
          as bool);

  @override
  _i5.DataSnapshot child(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#child, [path]),
            returnValue: _FakeDataSnapshot_11(
              this,
              Invocation.method(#child, [path]),
            ),
          )
          as _i5.DataSnapshot);
}

/// A class which mocks [UploadTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadTask extends _i1.Mock implements _i6.UploadTask {
  MockUploadTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FirebaseStorage get storage =>
      (super.noSuchMethod(
            Invocation.getter(#storage),
            returnValue: _FakeFirebaseStorage_16(
              this,
              Invocation.getter(#storage),
            ),
          )
          as _i6.FirebaseStorage);

  @override
  _i8.Stream<_i6.TaskSnapshot> get snapshotEvents =>
      (super.noSuchMethod(
            Invocation.getter(#snapshotEvents),
            returnValue: _i8.Stream<_i6.TaskSnapshot>.empty(),
          )
          as _i8.Stream<_i6.TaskSnapshot>);

  @override
  _i6.TaskSnapshot get snapshot =>
      (super.noSuchMethod(
            Invocation.getter(#snapshot),
            returnValue: _FakeTaskSnapshot_21(
              this,
              Invocation.getter(#snapshot),
            ),
          )
          as _i6.TaskSnapshot);

  @override
  _i8.Future<bool> pause() =>
      (super.noSuchMethod(
            Invocation.method(#pause, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> resume() =>
      (super.noSuchMethod(
            Invocation.method(#resume, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> cancel() =>
      (super.noSuchMethod(
            Invocation.method(#cancel, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Stream<_i6.TaskSnapshot> asStream() =>
      (super.noSuchMethod(
            Invocation.method(#asStream, []),
            returnValue: _i8.Stream<_i6.TaskSnapshot>.empty(),
          )
          as _i8.Stream<_i6.TaskSnapshot>);

  @override
  _i8.Future<_i6.TaskSnapshot> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#catchError, [onError], {#test: test}),
            returnValue: _i8.Future<_i6.TaskSnapshot>.value(
              _FakeTaskSnapshot_21(
                this,
                Invocation.method(#catchError, [onError], {#test: test}),
              ),
            ),
          )
          as _i8.Future<_i6.TaskSnapshot>);

  @override
  _i8.Future<S> then<S>(
    _i8.FutureOr<S> Function(_i6.TaskSnapshot)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#then, [onValue], {#onError: onError}),
            returnValue:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<S>(
                    this,
                    Invocation.method(#then, [onValue], {#onError: onError}),
                  ),
                  (S v) => _i8.Future<S>.value(v),
                ) ??
                _FakeFuture_22<S>(
                  this,
                  Invocation.method(#then, [onValue], {#onError: onError}),
                ),
          )
          as _i8.Future<S>);

  @override
  _i8.Future<_i6.TaskSnapshot> whenComplete(
    _i8.FutureOr<dynamic> Function()? action,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#whenComplete, [action]),
            returnValue: _i8.Future<_i6.TaskSnapshot>.value(
              _FakeTaskSnapshot_21(
                this,
                Invocation.method(#whenComplete, [action]),
              ),
            ),
          )
          as _i8.Future<_i6.TaskSnapshot>);

  @override
  _i8.Future<_i6.TaskSnapshot> timeout(
    Duration? timeLimit, {
    _i8.FutureOr<_i6.TaskSnapshot> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
            returnValue: _i8.Future<_i6.TaskSnapshot>.value(
              _FakeTaskSnapshot_21(
                this,
                Invocation.method(
                  #timeout,
                  [timeLimit],
                  {#onTimeout: onTimeout},
                ),
              ),
            ),
          )
          as _i8.Future<_i6.TaskSnapshot>);
}

/// A class which mocks [Contact].
///
/// See the documentation for Mockito's code generation for more information.
class MockContact extends _i1.Mock implements _i9.Contact {
  MockContact() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i11.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  set id(String? _id) => super.noSuchMethod(
    Invocation.setter(#id, _id),
    returnValueForMissingStub: null,
  );

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  set displayName(String? _displayName) => super.noSuchMethod(
    Invocation.setter(#displayName, _displayName),
    returnValueForMissingStub: null,
  );

  @override
  set thumbnail(_i13.Uint8List? _thumbnail) => super.noSuchMethod(
    Invocation.setter(#thumbnail, _thumbnail),
    returnValueForMissingStub: null,
  );

  @override
  set photo(_i13.Uint8List? _photo) => super.noSuchMethod(
    Invocation.setter(#photo, _photo),
    returnValueForMissingStub: null,
  );

  @override
  bool get isStarred =>
      (super.noSuchMethod(Invocation.getter(#isStarred), returnValue: false)
          as bool);

  @override
  set isStarred(bool? _isStarred) => super.noSuchMethod(
    Invocation.setter(#isStarred, _isStarred),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Name get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _FakeName_23(this, Invocation.getter(#name)),
          )
          as _i9.Name);

  @override
  set name(_i9.Name? _name) => super.noSuchMethod(
    Invocation.setter(#name, _name),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.Phone> get phones =>
      (super.noSuchMethod(
            Invocation.getter(#phones),
            returnValue: <_i9.Phone>[],
          )
          as List<_i9.Phone>);

  @override
  set phones(List<_i9.Phone>? _phones) => super.noSuchMethod(
    Invocation.setter(#phones, _phones),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.Email> get emails =>
      (super.noSuchMethod(
            Invocation.getter(#emails),
            returnValue: <_i9.Email>[],
          )
          as List<_i9.Email>);

  @override
  set emails(List<_i9.Email>? _emails) => super.noSuchMethod(
    Invocation.setter(#emails, _emails),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.Address> get addresses =>
      (super.noSuchMethod(
            Invocation.getter(#addresses),
            returnValue: <_i9.Address>[],
          )
          as List<_i9.Address>);

  @override
  set addresses(List<_i9.Address>? _addresses) => super.noSuchMethod(
    Invocation.setter(#addresses, _addresses),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.Organization> get organizations =>
      (super.noSuchMethod(
            Invocation.getter(#organizations),
            returnValue: <_i9.Organization>[],
          )
          as List<_i9.Organization>);

  @override
  set organizations(List<_i9.Organization>? _organizations) =>
      super.noSuchMethod(
        Invocation.setter(#organizations, _organizations),
        returnValueForMissingStub: null,
      );

  @override
  List<_i9.Website> get websites =>
      (super.noSuchMethod(
            Invocation.getter(#websites),
            returnValue: <_i9.Website>[],
          )
          as List<_i9.Website>);

  @override
  set websites(List<_i9.Website>? _websites) => super.noSuchMethod(
    Invocation.setter(#websites, _websites),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.SocialMedia> get socialMedias =>
      (super.noSuchMethod(
            Invocation.getter(#socialMedias),
            returnValue: <_i9.SocialMedia>[],
          )
          as List<_i9.SocialMedia>);

  @override
  set socialMedias(List<_i9.SocialMedia>? _socialMedias) => super.noSuchMethod(
    Invocation.setter(#socialMedias, _socialMedias),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.Event> get events =>
      (super.noSuchMethod(
            Invocation.getter(#events),
            returnValue: <_i9.Event>[],
          )
          as List<_i9.Event>);

  @override
  set events(List<_i9.Event>? _events) => super.noSuchMethod(
    Invocation.setter(#events, _events),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.Note> get notes =>
      (super.noSuchMethod(Invocation.getter(#notes), returnValue: <_i9.Note>[])
          as List<_i9.Note>);

  @override
  set notes(List<_i9.Note>? _notes) => super.noSuchMethod(
    Invocation.setter(#notes, _notes),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.Account> get accounts =>
      (super.noSuchMethod(
            Invocation.getter(#accounts),
            returnValue: <_i9.Account>[],
          )
          as List<_i9.Account>);

  @override
  set accounts(List<_i9.Account>? _accounts) => super.noSuchMethod(
    Invocation.setter(#accounts, _accounts),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.Group> get groups =>
      (super.noSuchMethod(
            Invocation.getter(#groups),
            returnValue: <_i9.Group>[],
          )
          as List<_i9.Group>);

  @override
  set groups(List<_i9.Group>? _groups) => super.noSuchMethod(
    Invocation.setter(#groups, _groups),
    returnValueForMissingStub: null,
  );

  @override
  bool get thumbnailFetched =>
      (super.noSuchMethod(
            Invocation.getter(#thumbnailFetched),
            returnValue: false,
          )
          as bool);

  @override
  set thumbnailFetched(bool? _thumbnailFetched) => super.noSuchMethod(
    Invocation.setter(#thumbnailFetched, _thumbnailFetched),
    returnValueForMissingStub: null,
  );

  @override
  bool get photoFetched =>
      (super.noSuchMethod(Invocation.getter(#photoFetched), returnValue: false)
          as bool);

  @override
  set photoFetched(bool? _photoFetched) => super.noSuchMethod(
    Invocation.setter(#photoFetched, _photoFetched),
    returnValueForMissingStub: null,
  );

  @override
  bool get isUnified =>
      (super.noSuchMethod(Invocation.getter(#isUnified), returnValue: false)
          as bool);

  @override
  set isUnified(bool? _isUnified) => super.noSuchMethod(
    Invocation.setter(#isUnified, _isUnified),
    returnValueForMissingStub: null,
  );

  @override
  bool get propertiesFetched =>
      (super.noSuchMethod(
            Invocation.getter(#propertiesFetched),
            returnValue: false,
          )
          as bool);

  @override
  set propertiesFetched(bool? _propertiesFetched) => super.noSuchMethod(
    Invocation.setter(#propertiesFetched, _propertiesFetched),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toJson({
    bool? withThumbnail = true,
    bool? withPhoto = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toJson, [], {
              #withThumbnail: withThumbnail,
              #withPhoto: withPhoto,
            }),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i8.Future<_i9.Contact> insert() =>
      (super.noSuchMethod(
            Invocation.method(#insert, []),
            returnValue: _i8.Future<_i9.Contact>.value(
              _FakeContact_24(this, Invocation.method(#insert, [])),
            ),
          )
          as _i8.Future<_i9.Contact>);

  @override
  _i8.Future<_i9.Contact> update({bool? withGroups = false}) =>
      (super.noSuchMethod(
            Invocation.method(#update, [], {#withGroups: withGroups}),
            returnValue: _i8.Future<_i9.Contact>.value(
              _FakeContact_24(
                this,
                Invocation.method(#update, [], {#withGroups: withGroups}),
              ),
            ),
          )
          as _i8.Future<_i9.Contact>);

  @override
  _i8.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  String toVCard({
    bool? withPhoto = true,
    String? productId,
    bool? includeDate = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toVCard, [], {
              #withPhoto: withPhoto,
              #productId: productId,
              #includeDate: includeDate,
            }),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.method(#toVCard, [], {
                #withPhoto: withPhoto,
                #productId: productId,
                #includeDate: includeDate,
              }),
            ),
          )
          as String);

  @override
  void deduplicateProperties() => super.noSuchMethod(
    Invocation.method(#deduplicateProperties, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i15.ImagePicker {
  MockImagePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i10.XFile?> pickImage({
    required _i10.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i10.CameraDevice? preferredCameraDevice = _i10.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickImage, [], {
              #source: source,
              #maxWidth: maxWidth,
              #maxHeight: maxHeight,
              #imageQuality: imageQuality,
              #preferredCameraDevice: preferredCameraDevice,
              #requestFullMetadata: requestFullMetadata,
            }),
            returnValue: _i8.Future<_i10.XFile?>.value(),
          )
          as _i8.Future<_i10.XFile?>);

  @override
  _i8.Future<List<_i10.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickMultiImage, [], {
              #maxWidth: maxWidth,
              #maxHeight: maxHeight,
              #imageQuality: imageQuality,
              #limit: limit,
              #requestFullMetadata: requestFullMetadata,
            }),
            returnValue: _i8.Future<List<_i10.XFile>>.value(<_i10.XFile>[]),
          )
          as _i8.Future<List<_i10.XFile>>);

  @override
  _i8.Future<_i10.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickMedia, [], {
              #maxWidth: maxWidth,
              #maxHeight: maxHeight,
              #imageQuality: imageQuality,
              #requestFullMetadata: requestFullMetadata,
            }),
            returnValue: _i8.Future<_i10.XFile?>.value(),
          )
          as _i8.Future<_i10.XFile?>);

  @override
  _i8.Future<List<_i10.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickMultipleMedia, [], {
              #maxWidth: maxWidth,
              #maxHeight: maxHeight,
              #imageQuality: imageQuality,
              #limit: limit,
              #requestFullMetadata: requestFullMetadata,
            }),
            returnValue: _i8.Future<List<_i10.XFile>>.value(<_i10.XFile>[]),
          )
          as _i8.Future<List<_i10.XFile>>);

  @override
  _i8.Future<_i10.XFile?> pickVideo({
    required _i10.ImageSource? source,
    _i10.CameraDevice? preferredCameraDevice = _i10.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickVideo, [], {
              #source: source,
              #preferredCameraDevice: preferredCameraDevice,
              #maxDuration: maxDuration,
            }),
            returnValue: _i8.Future<_i10.XFile?>.value(),
          )
          as _i8.Future<_i10.XFile?>);

  @override
  _i8.Future<_i10.LostDataResponse> retrieveLostData() =>
      (super.noSuchMethod(
            Invocation.method(#retrieveLostData, []),
            returnValue: _i8.Future<_i10.LostDataResponse>.value(
              _FakeLostDataResponse_25(
                this,
                Invocation.method(#retrieveLostData, []),
              ),
            ),
          )
          as _i8.Future<_i10.LostDataResponse>);

  @override
  bool supportsImageSource(_i10.ImageSource? source) =>
      (super.noSuchMethod(
            Invocation.method(#supportsImageSource, [source]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i16.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<_i4.User?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i8.Stream<_i4.User?>.empty(),
          )
          as _i8.Stream<_i4.User?>);

  @override
  _i8.Future<_i4.UserCredential?> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i8.Future<_i4.UserCredential?>.value(),
          )
          as _i8.Future<_i4.UserCredential?>);

  @override
  _i8.Future<void> updateUserProfile(
    String? displayName,
    String? phoneNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [displayName, phoneNumber]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> saveFcmToken(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#saveFcmToken, [userId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [MessageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageService extends _i1.Mock implements _i17.MessageService {
  MockMessageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getConversationId(String? userId1, String? userId2) =>
      (super.noSuchMethod(
            Invocation.method(#getConversationId, [userId1, userId2]),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.method(#getConversationId, [userId1, userId2]),
            ),
          )
          as String);

  @override
  _i8.Future<void> sendMessage(_i18.Message? message) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [message]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> editMessage(
    String? conversationId,
    String? messageId,
    String? newContent,
    String? originalContent,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#editMessage, [
              conversationId,
              messageId,
              newContent,
              originalContent,
            ]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updateMessageImage(
    String? conversationId,
    String? messageId,
    String? newImageUrl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateMessageImage, [
              conversationId,
              messageId,
              newImageUrl,
            ]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<Map<dynamic, dynamic>> getMessagesSnapshot(
    String? conversationId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMessagesSnapshot, [conversationId]),
            returnValue: _i8.Future<Map<dynamic, dynamic>>.value(
              <dynamic, dynamic>{},
            ),
          )
          as _i8.Future<Map<dynamic, dynamic>>);

  @override
  _i8.Stream<List<_i18.Message>> getMessages(
    String? userId1,
    String? userId2,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMessages, [userId1, userId2]),
            returnValue: _i8.Stream<List<_i18.Message>>.empty(),
          )
          as _i8.Stream<List<_i18.Message>>);

  @override
  _i8.Stream<List<_i19.Conversation>> getConversations(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getConversations, [userId]),
            returnValue: _i8.Stream<List<_i19.Conversation>>.empty(),
          )
          as _i8.Stream<List<_i19.Conversation>>);

  @override
  _i8.Future<void> markMessagesAsRead(String? conversationId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#markMessagesAsRead, [conversationId, userId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> createOrUpdateConversation(
    String? userId1,
    String? userId2,
    String? lastMessageContent,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createOrUpdateConversation, [
              userId1,
              userId2,
              lastMessageContent,
            ]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}
